{"version":3,"sources":["components/Profile/Profile.module.scss","components/Profile/profile-photo.jpg","components/Profile/Profile.js","containers/ProfileContainer.js"],"names":["module","exports","Profile","props","useEffect","handlerRequest","userId","loggedIn","data","className","s","city","languages","map","i","key","src","img","alt","social","label","target","rel","href","link","message","isFetching","to","connect","store","profile","user","login","dispatch","id","handlerUserInfoRequest"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,MAAQ,uBAAuB,IAAM,qBAAqB,KAAO,sBAAsB,KAAO,sBAAsB,IAAM,qBAAqB,KAAO,wB,mBCDrMD,EAAOC,QAAU,IAA0B,2C,mHCM5B,SAASC,EAAQC,GA0E9B,OAxEAC,qBAAU,YAERC,EADuBF,EAAME,gBACdF,EAAMG,UACpB,CAACH,EAAME,eAAgBF,EAAMG,SAsE9B,6BACGH,EAAMI,SAAW,6BAnEhBJ,EAAMK,KAAKF,OAEX,yBAAKG,UAAWC,QACd,yBAAKD,UAAWC,QAAQ,yBAAKD,UAAWC,OACtC,+DAAYP,EAAMK,KAAKG,OAEvB,yBAAKF,UAAWC,QACd,+DACCP,EAAMK,KAAKI,UAAUC,KAAI,SAAAC,GACxB,OAAO,wBAAIC,IAAKD,GAAIA,QAI1B,yBAAKL,UAAWC,SACd,yBAAKM,IAAKC,IAAKC,IAAI,eAErB,yBAAKT,UAAWC,OACbP,EAAMK,KAAKW,OAAON,KAAI,SAAAC,GACrB,IAAIE,EACJ,OAAQF,EAAEM,OACR,IAAK,KACHJ,EAAM,cACN,MAEF,IAAK,WACHA,EAAM,oBACN,MAEF,IAAK,UACHA,EAAM,mBACN,MAEF,IAAK,UACHA,EAAM,mBACN,MAEF,IAAK,SACHA,EAAM,kBACN,MAEF,QACEA,EAAM,eAIV,OAAO,uBACLK,OAAO,SACPC,IAAI,sBACJC,KAAMT,EAAEU,KAAMT,IAAKD,EAAEU,KACrBf,UAAWC,QACX,yBACEM,IAAKA,EACLE,IAAKJ,EAAEM,cAKVjB,EAAMsB,QACR,4BAAKtB,EAAMsB,SAETtB,EAAMuB,WACR,kBAAC,IAAD,WADF,GASH,wBAAIjB,UAAWC,QAAf,qNACA,kBAAC,IAAD,CAAMiB,GAAG,UAAT,qFCnCOC,uBAjBS,SAAAC,GACtB,MAAO,CACLrB,KAAMqB,EAAMC,QAAQtB,KACpBkB,WAAYG,EAAMC,QAAQJ,WAC1BD,QAASI,EAAMC,QAAQL,QACvBlB,SAAUsB,EAAME,KAAKxB,SACrBD,OAAQuB,EAAME,KAAKzB,OACnB0B,MAAOH,EAAME,KAAKC,UAIK,SAAAC,GACzB,MAAO,CACL5B,eAAgB,SAAA6B,GAAE,OAAID,EAASE,YAAuBD,QAI3CN,EA3Cf,SAA0BzB,GAExB,OACE,kBAACD,EAAD,CACEM,KAAML,EAAMK,KACZkB,WAAYvB,EAAMuB,WAClBD,QAAStB,EAAMsB,QACfpB,eAAgBF,EAAME,eACtBE,SAAUJ,EAAMI,SAChByB,MAAO7B,EAAM6B,MACb1B,OAAQH,EAAMG","file":"static/js/4.7606eef9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Profile_wrap__27L33\",\"photo\":\"Profile_photo__1QWgV\",\"soc\":\"Profile_soc__lUDrc\",\"link\":\"Profile_link__2CA8m\",\"info\":\"Profile_info__1Xg42\",\"loc\":\"Profile_loc__2m8gP\",\"auth\":\"Profile_auth__r3cJx\"};","module.exports = __webpack_public_path__ + \"static/media/profile-photo.d6974370.jpg\";","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from '../LoadingComponent/LoadingComponent';\r\nimport * as s from './Profile.module.scss'\r\nimport img from './profile-photo.jpg'\r\n\r\nexport default function Profile(props) {\r\n\r\n  useEffect(() => {\r\n    const handlerRequest = props.handlerRequest;\r\n    handlerRequest(props.userId)\r\n  }, [props.handlerRequest, props.userId])\r\n\r\n  function tmp() {\r\n\r\n    if (props.data.userId) {\r\n      return (\r\n        <div className={s.wrap}>\r\n          <div className={s.info}><div className={s.loc}>\r\n            <h2>Город: {props.data.city}</h2>\r\n          </div>\r\n            <div className={s.lang}>\r\n              <h2>Языки:</h2>\r\n              {props.data.languages.map(i => {\r\n                return <h3 key={i}>{i}</h3>\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div className={s.photo}>\r\n            <img src={img} alt=\"nice girl\" />\r\n          </div>\r\n          <div className={s.soc}>\r\n            {props.data.social.map(i => {\r\n              let src;\r\n              switch (i.label) {\r\n                case 'vk':\r\n                  src = 'logo-vk.png'\r\n                  break;\r\n\r\n                case 'telegram':\r\n                  src = 'logo-telegram.png'\r\n                  break;\r\n\r\n                case 'youtube':\r\n                  src = 'logo-youtube.png'\r\n                  break;\r\n\r\n                case 'twitter':\r\n                  src = 'logo-twitter.png'\r\n                  break;\r\n\r\n                case 'twitch':\r\n                  src = 'logo-twitch.png'\r\n                  break;\r\n\r\n                default:\r\n                  src = 'logo-web.png'\r\n                  break;\r\n              }\r\n\r\n              return <a\r\n                target='_blank'\r\n                rel='noopener noreferrer'\r\n                href={i.link} key={i.link}\r\n                className={s.link}>\r\n                <img\r\n                  src={src}\r\n                  alt={i.label} /></a>\r\n            })}\r\n          </div>\r\n        </div>\r\n      )\r\n    } else if (props.message) {\r\n      return <h2>{props.message}</h2>\r\n\r\n    } else if (props.isFetching) {\r\n      return <Loading />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {props.loggedIn ? <div>{tmp()}</div> :\r\n\r\n        <h2 className={s.auth}>Чтобы увидеть данный раздел, пожалуйста,\r\n        <Link to='/login'> авторизуйтесь</Link>\r\n        </h2>}\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux';\r\nimport { handlerUserInfoRequest } from '../actions/ProfileAction';\r\n\r\nimport Profile from '../components/Profile/Profile';\r\n\r\nfunction ProfileContainer(props) {\r\n\r\n  return (\r\n    <Profile\r\n      data={props.data}\r\n      isFetching={props.isFetching}\r\n      message={props.message}\r\n      handlerRequest={props.handlerRequest}\r\n      loggedIn={props.loggedIn}\r\n      login={props.login}\r\n      userId={props.userId}\r\n    />\r\n  )\r\n\r\n}\r\n\r\nProfileContainer.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n  isFetching: PropTypes.bool.isRequired,\r\n  message: PropTypes.string.isRequired,\r\n  handlerRequest: PropTypes.func.isRequired,\r\n  loggedIn: PropTypes.bool.isRequired,\r\n  userId: PropTypes.number.isRequired,\r\n  login: PropTypes.string.isRequired\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    data: store.profile.data,\r\n    isFetching: store.profile.isFetching,\r\n    message: store.profile.message,\r\n    loggedIn: store.user.loggedIn,\r\n    userId: store.user.userId,\r\n    login: store.user.login,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handlerRequest: id => dispatch(handlerUserInfoRequest(id)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}